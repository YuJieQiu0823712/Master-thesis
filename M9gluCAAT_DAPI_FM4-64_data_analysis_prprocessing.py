# -*- coding: utf-8 -*-
"""
Created on April 12 2024

@author: Yu-Jie Qiu
"""

import pickle
from pathlib import Path
import tifffile as tiff
import numpy as np
from scipy import interpolate
import cv2 as cv
import math
from skimage.draw import polygon2mask
from shapely import Polygon
import pandas as pd
from tqdm import tqdm
from scipy.ndimage import gaussian_filter1d
import matplotlib.pyplot as plt

from skimage.feature import graycomatrix, graycoprops
from skimage.measure import shannon_entropy
import os

import seaborn as sns
from matplotlib.patches import Patch

#%%
# cd C:\\Jade\\thesis\\data\\Master thesis github\\Master thesis github
# pwd

#%% Load nucleoid_resulting_df
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/M9gluCAAT_BW25113/M9gluCAAT_BW25113_nucleoid_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
BW25113_nucleoid_resulting_df = pd.DataFrame(my_data)

path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/+/M9gluCAAT_dacA/M9gluCAAT_dacA_nucleoid_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
dacA_nucleoid_resulting_df = pd.DataFrame(my_data)
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/+/M9gluCAAT_lpp/M9gluCAAT_lpp_nucleoid_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
lpp_nucleoid_resulting_df = pd.DataFrame(my_data)
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/+/M9gluCAAT_tolR/M9gluCAAT_tolR_nucleoid_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
tolR_nucleoid_resulting_df = pd.DataFrame(my_data)
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/+/M9gluCAAT_yfaQ/M9gluCAAT_yfaQ_nucleoid_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
yfaQ_nucleoid_resulting_df = pd.DataFrame(my_data)
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/+/M9gluCAAT_yijD/M9gluCAAT_yijD_nucleoid_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
yijD_nucleoid_resulting_df = pd.DataFrame(my_data)


path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/-/M9gluCAAT_hdfR/M9gluCAAT_hdfR_nucleoid_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
hdfR_nucleoid_resulting_df = pd.DataFrame(my_data)
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/-/M9gluCAAT_nlpI/M9gluCAAT_nlpI_nucleoid_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
nlpI_nucleoid_resulting_df = pd.DataFrame(my_data)
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/-/M9gluCAAT_wzzE/M9gluCAAT_wzzE_nucleoid_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
wzzE_nucleoid_resulting_df = pd.DataFrame(my_data)
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/-/M9gluCAAT_yaaY/M9gluCAAT_yaaY_nucleoid_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
yaaY_nucleoid_resulting_df = pd.DataFrame(my_data)
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/-/M9gluCAAT_yifE/M9gluCAAT_yifE_nucleoid_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
yifE_nucleoid_resulting_df = pd.DataFrame(my_data)



#%% Load OM_resulting_df
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/M9gluCAAT_BW25113/M9gluCAAT_BW25113_OM_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
BW25113_OM_resulting_df = pd.DataFrame(my_data)

path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/+/M9gluCAAT_dacA/M9gluCAAT_dacA_OM_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
dacA_OM_resulting_df = pd.DataFrame(my_data)
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/+/M9gluCAAT_lpp/M9gluCAAT_lpp_OM_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
lpp_OM_resulting_df = pd.DataFrame(my_data)
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/+/M9gluCAAT_tolR/M9gluCAAT_tolR_OM_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
tolR_OM_resulting_df = pd.DataFrame(my_data)
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/+/M9gluCAAT_yfaQ/M9gluCAAT_yfaQ_OM_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
yfaQ_OM_resulting_df = pd.DataFrame(my_data)
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/+/M9gluCAAT_yijD/M9gluCAAT_yijD_OM_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
yijD_OM_resulting_df = pd.DataFrame(my_data)


path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/-/M9gluCAAT_hdfR/M9gluCAAT_hdfR_OM_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
hdfR_OM_resulting_df = pd.DataFrame(my_data)
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/-/M9gluCAAT_nlpI/M9gluCAAT_nlpI_OM_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
nlpI_OM_resulting_df = pd.DataFrame(my_data)
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/-/M9gluCAAT_wzzE/M9gluCAAT_wzzE_OM_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
wzzE_OM_resulting_df = pd.DataFrame(my_data)
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/-/M9gluCAAT_yaaY/M9gluCAAT_yaaY_OM_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
yaaY_OM_resulting_df = pd.DataFrame(my_data)
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/-/M9gluCAAT_yifE/M9gluCAAT_yifE_OM_resulting_df.pkl')
path.parent.mkdir(parents=True, exist_ok=True)
with open(path, "rb") as file:
    my_data = pickle.load(file)    
yifE_OM_resulting_df = pd.DataFrame(my_data)

#%% Merge nuceoid and OM_resulting_df
nucleoid_resulting_df = BW25113_nucleoid_resulting_df
nucleoid_resulting_df = nucleoid_resulting_df.drop(nucleoid_resulting_df.columns[[4,6,7,32,33,46,47,49,56]], axis=1)
OM_resulting_df = BW25113_OM_resulting_df
OM_resulting_df = OM_resulting_df.drop(OM_resulting_df.columns[[0,3,4,5,8]], axis=1)
BW25113_merged_resulting_df = pd.merge(nucleoid_resulting_df, OM_resulting_df, on=['frame', 'cell_id'], suffixes=('_N', '_OM'))
BW25113_merged_resulting_df.to_pickle('BW25113_merged_resulting_df.pkl')  

##
nucleoid_resulting_df = dacA_nucleoid_resulting_df
nucleoid_resulting_df = nucleoid_resulting_df.drop(nucleoid_resulting_df.columns[[4,6,7,32,33,46,47,49,56]], axis=1)
OM_resulting_df = dacA_OM_resulting_df
OM_resulting_df = OM_resulting_df.drop(OM_resulting_df.columns[[0,3,4,5,8]], axis=1)
dacA_merged_resulting_df = pd.merge(nucleoid_resulting_df, OM_resulting_df, on=['frame', 'cell_id'], suffixes=('_N', '_OM'))
dacA_merged_resulting_df.to_pickle('dacA_merged_resulting_df.pkl')            

##
nucleoid_resulting_df = lpp_nucleoid_resulting_df
nucleoid_resulting_df = nucleoid_resulting_df.drop(nucleoid_resulting_df.columns[[4,6,7,32,33,46,47,49,56]], axis=1)
OM_resulting_df = lpp_OM_resulting_df
OM_resulting_df = OM_resulting_df.drop(OM_resulting_df.columns[[0,3,4,5,8]], axis=1)
lpp_merged_resulting_df = pd.merge(nucleoid_resulting_df, OM_resulting_df, on=['frame', 'cell_id'], suffixes=('_N', '_OM'))
lpp_merged_resulting_df.to_pickle('lpp_merged_resulting_df.pkl')   

##
nucleoid_resulting_df = tolR_nucleoid_resulting_df
nucleoid_resulting_df = nucleoid_resulting_df.drop(nucleoid_resulting_df.columns[[4,6,7,32,33,46,47,49,56]], axis=1)
OM_resulting_df = tolR_OM_resulting_df
OM_resulting_df = OM_resulting_df.drop(OM_resulting_df.columns[[0,3,4,5,8]], axis=1)
tolR_merged_resulting_df = pd.merge(nucleoid_resulting_df, OM_resulting_df, on=['frame', 'cell_id'], suffixes=('_N', '_OM'))
tolR_merged_resulting_df.to_pickle('tolR_merged_resulting_df.pkl')          

##
nucleoid_resulting_df = yfaQ_nucleoid_resulting_df
nucleoid_resulting_df = nucleoid_resulting_df.drop(nucleoid_resulting_df.columns[[4,6,7,32,33,46,47,49,56]], axis=1)
OM_resulting_df = yfaQ_OM_resulting_df
OM_resulting_df = OM_resulting_df.drop(OM_resulting_df.columns[[0,3,4,5,8]], axis=1)
yfaQ_merged_resulting_df = pd.merge(nucleoid_resulting_df, OM_resulting_df, on=['frame', 'cell_id'], suffixes=('_N', '_OM'))
yfaQ_merged_resulting_df.to_pickle('yfaQ_merged_resulting_df.pkl')           

##
nucleoid_resulting_df = yijD_nucleoid_resulting_df
nucleoid_resulting_df = nucleoid_resulting_df.drop(nucleoid_resulting_df.columns[[4,6,7,32,33,46,47,49,56]], axis=1)
OM_resulting_df = yijD_OM_resulting_df
OM_resulting_df = OM_resulting_df.drop(OM_resulting_df.columns[[0,3,4,5,8]], axis=1)
yijD_merged_resulting_df = pd.merge(nucleoid_resulting_df, OM_resulting_df, on=['frame', 'cell_id'], suffixes=('_N', '_OM'))
yijD_merged_resulting_df.to_pickle('yijD_merged_resulting_df.pkl')             

##
nucleoid_resulting_df = hdfR_nucleoid_resulting_df
nucleoid_resulting_df = nucleoid_resulting_df.drop(nucleoid_resulting_df.columns[[4,6,7,32,33,46,47,49,56]], axis=1)
OM_resulting_df = hdfR_OM_resulting_df
OM_resulting_df = OM_resulting_df.drop(OM_resulting_df.columns[[0,3,4,5,8]], axis=1)
hdfR_merged_resulting_df = pd.merge(nucleoid_resulting_df, OM_resulting_df, on=['frame', 'cell_id'], suffixes=('_N', '_OM'))
hdfR_merged_resulting_df.to_pickle('hdfR_merged_resulting_df.pkl')        

##
nucleoid_resulting_df = nlpI_nucleoid_resulting_df
nucleoid_resulting_df = nucleoid_resulting_df.drop(nucleoid_resulting_df.columns[[4,6,7,32,33,46,47,49,56]], axis=1)
OM_resulting_df = nlpI_OM_resulting_df
OM_resulting_df = OM_resulting_df.drop(OM_resulting_df.columns[[0,3,4,5,8]], axis=1)
nlpI_merged_resulting_df = pd.merge(nucleoid_resulting_df, OM_resulting_df, on=['frame', 'cell_id'], suffixes=('_N', '_OM'))
nlpI_merged_resulting_df.to_pickle('nlpI_merged_resulting_df.pkl')            

##
nucleoid_resulting_df = wzzE_nucleoid_resulting_df
nucleoid_resulting_df = nucleoid_resulting_df.drop(nucleoid_resulting_df.columns[[4,6,7,32,33,46,47,49,56]], axis=1)
OM_resulting_df = wzzE_OM_resulting_df
OM_resulting_df = OM_resulting_df.drop(OM_resulting_df.columns[[0,3,4,5,8]], axis=1)
wzzE_merged_resulting_df = pd.merge(nucleoid_resulting_df, OM_resulting_df, on=['frame', 'cell_id'], suffixes=('_N', '_OM'))
wzzE_merged_resulting_df.to_pickle('wzzE_merged_resulting_df.pkl')               

##
nucleoid_resulting_df = yaaY_nucleoid_resulting_df
nucleoid_resulting_df = nucleoid_resulting_df.drop(nucleoid_resulting_df.columns[[4,6,7,32,33,46,47,49,56]], axis=1)
OM_resulting_df = yaaY_OM_resulting_df
OM_resulting_df = OM_resulting_df.drop(OM_resulting_df.columns[[0,3,4,5,8]], axis=1)
yaaY_merged_resulting_df = pd.merge(nucleoid_resulting_df, OM_resulting_df, on=['frame', 'cell_id'], suffixes=('_N', '_OM'))
yaaY_merged_resulting_df.to_pickle('yaaY_merged_resulting_df.pkl')          

##
nucleoid_resulting_df = yifE_nucleoid_resulting_df
nucleoid_resulting_df = nucleoid_resulting_df.drop(nucleoid_resulting_df.columns[[4,6,7,32,33,46,47,49,56]], axis=1)
OM_resulting_df = yifE_OM_resulting_df
OM_resulting_df = OM_resulting_df.drop(OM_resulting_df.columns[[0,3,4,5,8]], axis=1)
yifE_merged_resulting_df = pd.merge(nucleoid_resulting_df, OM_resulting_df, on=['frame', 'cell_id'], suffixes=('_N', '_OM'))
yifE_merged_resulting_df.to_pickle('yifE_merged_resulting_df.pkl')  



#BW25113 = 990 cells
#dacA = 2035 
#lpp = 3275
#tolR = 1023
#yfaQ = 1871
#yijD = 1665
#hdfR = 1178
#nlpI = 862
#wzzE = 2865
#yaaY = 2623
#yifE = 1872





#%% Omit index => filter the bad contour, out of focus cells

pkl_file = 'C:/Jade/thesis/data/Yu-Jie 11 strains 2/BW25113_merged_resulting_df.pkl'
with open(pkl_file, "rb") as file:
  BW25113_merged_resulting_df = pickle.load(file) 
BW25113_result_omit = BW25113_merged_resulting_df.drop([13,20,64,73,87,103,142,196,225,231,241,249,257,259,262,267,295,299,419,446,462,490,505,506,518,526,529,533,543,569,626,667,701,702,703,722,725,806,818,842,880,887,950,
                                                        19,27,70,126,130,134,146,149,158,163,169,187,232,244,251,255,269,274,275,277,283,289,292,306,307,316,317,321,329,335,342,354,370,388,393,411,428,431,475,478,481,482,487,498,499,501,510,513,539,541,548,557,566,568,571,582,584,597,599,600,605,637,643,644,653,669,671,681,682,683,688,689,697,704,712,729,749,752,769,770,775,785,786,790,795,796,798,813,825,830,847,852,858,864,867,872,873,878,901,903,940,958,972,975,976,979,985,989,
                                                        82,91,95,96,106,107,109,113,116,117,119,122,123,131,135,138,154,209,273,276,279,280,284,404,409,414,417,422,426,427,437,448,451,452,453,454,457,458,461,466,479,488,495,504,530,540,551,587,595,608,619,663,670,679,694,698,707,822,839,840,843,951,960,961,980,981,
                                                        4,201,558,
                                                        516,542])
W25113_result_omit = BW25113_result_omit.reset_index(drop=True)
BW25113_result_omit.to_pickle('BW25113_result_omit.pkl')          

##
pkl_file = 'C:/Jade/thesis/data/Yu-Jie 11 strains 2/dacA_merged_resulting_df.pkl'
with open(pkl_file, "rb") as file:
  dacA_merged_resulting_df = pickle.load(file) 
dacA_result_omit = dacA_merged_resulting_df.drop([33,36,43,51,58,73,88,93,122,137,157,187,192,202,211,256,277,283,290,311,321,373,384,385,405,409,410,446,449,453,509,537,545,548,558,559,571,588,594,645,651,660,711,714,715,726,734,748,752,756,765,768,784,787,803,807,842,877,922,934,955,964,975,980,1000,1003,1017,1018,1025,1055,1101,1111,1135,1150,1153,1165,1168,1170,1174,1181,1193,1195,1208,1222,1260,1277,1302,1311,1351,1353,1415,1426,1446,1482,1496,1500,1517,1522,1528,1531,1541,1544,1553,1554,1566,1578,1582,1583,1584,1587,1643,1644,1707,1715,1726,1772,1776,1932,1954,1960,2002,2017,2018,2033,
                                                  13,28,38,39,46,52,63,77,82,102,107,108,113,117,142,143,149,155,159,161,162,167,170,175,197,198,207,216,235,241,267,293,297,301,308,309,310,314,316,317,322,323,326,328,329,334,338,351,357,364,380,381,391,416,418,420,422,433,441,445,458,474,485,495,504,506,526,535,538,540,542,543,547,550,560,562,563,566,575,583,589,592,597,600,604,609,612,617,624,630,634,647,653,658,664,666,681,683,684,688,696,698,699,713,719,720,725,730,732,741,746,749,754,761,775,776,779,782,798,800,805,810,826,827,830,845,856,857,861,867,880,881,882,883,893,907,913,914,915,920,926,929,931,937,939,940,941,947,952,954,956,960,961,965,967,970,971,972,973,1001,1004,1009,1010,1014,1023,1026,1039,1043,1045,1058,1066,1077,1081,1089,1092,1118,1122,1127,1132,1140,1142,1148,1159,1169,1200,1203,1204,1207,1217,1219,1223,1224,1232,1246,1254,1256,1259,1261,1266,1280,1290,1291,1323,1325,1341,1346,1361,1366,1368,1378,1393,1394,1399,1402,1419,1422,1424,1431,1437,1443,1445,1459,1460,1462,1465,1471,1471,1482,1489,1504,1540,1542,1548,1549,1550,1551,1555,1560,1575,1580,1581,1597,1600,1613,1617,1619,1623,1632,1652,1660,1661,1667,1668,1671,1674,1675,1676,1677,1681,1682,1688,1689,1697,1700,1708,1724,1737,1741,1744,1750,1754,1756,1759,1761,1762,1765,1774,1781,1783,1785,1788,1789,1790,1793,1798,1811,1815,1830,1843,1844,1845,1846,1855,1859,1862,1870,1874,1877,1883,1885,1888,1891,1894,1897,1901,1903,1904,1908,1912,1926,1927,1929,1931,1940,1947,1956,1973,1985,1995,1998,2006,2007,2008,2014,2019,2025,2028,2029,2031,2032,
                                                  318,339,903,1455,1961,2022,2027,
                                                  650,1530,1590])
dacA_result_omit = dacA_result_omit.reset_index(drop=True)
dacA_result_omit.to_pickle('dacA_result_omit.pkl')          

##
pkl_file = 'C:/Jade/thesis/data/Yu-Jie 11 strains 2/lpp_merged_resulting_df.pkl'
with open(pkl_file, "rb") as file:
  lpp_merged_resulting_df = pickle.load(file) 
  
lpp_result_omit  = lpp_merged_resulting_df.drop([2,99,100,112,164,186,194,214,232,277,278,289,301,302,314,316,367,374,377,379,451,453,466,487,488,498,504,505,510,521,543,558,559,565,580,600,604,608,609,657,730,758,759,809,811,864,890,896,912,953,968,1011,1094,1102,1122,1174,1185,1200,1224,1232,1261,1262,1322,1359,1450,1504,1516,1525,1539,1542,1543,1545,1550,1556,1562,1563,1604,1631,1657,1722,1727,1759,1763,1777,1804,1858,1895,1922,1925,1938,1943,1955,1969,1988,2002,2031,2057,2078,2108,2118,2119,2145,2205,2219,2240,2251,2263,2265,2319,2336,2405,2409,2434,2458,2496,2509,2598,2599,2611,2634,2642,2643,2644,2648,2711,2746,2944,2949,2954,2970,2991,3019,3035,3097,3102,3104,3115,3153,3157,3224,3226,3254,3256,3270,
                                                  0,5,7,14,15,29,33,37,54,59,62,68,83,93,105,132,142,144,152,201,203,205,206,207,214,235,259,261,264,272,274,281,286,287,313,335,338,339,362,363,364,387,418,421,436,438,447,473,503,507,514,532,542,548,549,550,552,553,556,561,562,572,573,577,590,602,623,635,651,676,683,684,688,710,791,793,801,817,820,822,826,837,851,852,859,880,888,895,900,908,918,920,921,922,929,930,938,939,940,950,961,980,983,984,985,1013,1014,1020,1032,1055,1057,1063,1080,1086,1199,1203,1205,1214,1217,1235,1236,1240,1242,1243,1258,1265,1270,1276,1280,1281,1283,1289,1293,1297,1313,1315,1337,1343,1351,1355,1370,1371,1373,1395,1437,1458,1460,1465,1466,1481,1482,1498,1508,1510,1523,1534,1546,1547,1549,1551,1553,1554,1555,1558,1559,1567,1569,1574,1575,1577,1585,1588,1596,1600,1611,1630,1652,1654,1677,1700,1764,1800,1802,1814,1849,1865,1866,1874,1877,1888,1893,1894,1898,1912,1917,1926,1930,1934,1935,1951,1962,1966,1976,2025,2056,2095,2097,2104,2116,2120,2173,2176,2179,2193,2200,2201,2228,2237,2242,2246,2247,2248,2252,2259,2261,2264,2266,2268,2269,2271,2277,2284,2285,2297,2303,2318,2341,2342,2365,2386,2411,2454,2463,2470,2483,2495,2515,2522,2538,2539,2541,2545,2556,2560,2578,2580,2582,2583,2590,2614,2615,2616,2636,2645,2647,2649,2650,2657,2661,2662,2663,2666,2714,2720,2764,2783,2785,2825,2830,2844,2848,2849,2853,2858,2862,2864,2871,2877,2878,2883,2911,2913,2922,2923,2925,2926,2933,2950,2956,2969,2974,2989,2993,2998,3007,3009,3010,3022,3024,3050,3068,3071,3076,3122,3136,3151,3168,3183,3192,3197,3203,3215,3228,3251,3255,3269,3273,
                                                  371,449,2328,2508,2792,  
                                                  941,1484,2549])
lpp_result_omit = lpp_result_omit.reset_index(drop=True)
lpp_result_omit.to_pickle('lpp_result_omit.pkl')
      
##
pkl_file = 'C:/Jade/thesis/data/Yu-Jie 11 strains 2/tolR_merged_resulting_df.pkl'
with open(pkl_file, "rb") as file:
  tolR_merged_resulting_df = pickle.load(file) 
   
tolR_result_omit  = tolR_merged_resulting_df.drop([15,27,29,40,46,50,21,52,63,66,74,88,89,96,97,100,150,156,171,185,189,194,212,213,235,239,240,252,260,262,264,283,284,286,288,289,303,304,305,306,310,358,365,368,376,383,388,391,403,404,406,413,418,425,433,434,443,445,449,461,470,485,496,497,510,514,515,518,519,520,521,545,560,573,580,581,583,587,598,612,622,627,647,656,657,660,665,682,687,693,702,704,725,750,755,756,758,771,781,785,798,813,833,834,858,867,877,883,891,892,901,928,930,934,937,946,958,959,980,982,986,1002,1008,
                                                    0,3,4,8,11,13,14,16,18,19,21,33,35,37,39,41,43,45,48,49,59,68,75,80,81,90,111,112,115,116,117,119,121,123,168,183,188,195,196,203,207,214,222,224,246,248,249,270,271,277,278,280,282,290,293,294,329,335,337,340,341,344,347,351,362,366,369,372,373,400,407,408,414,417,419,420,421,427,428,431,432,442,450,462,465,468,476,491,512,523,525,526,527,530,535,538,539,541,542,543,544,546,555,556,557,558,563,564,565,566,569,571,588,590,602,605,617,621,626,635,638,640,646,648,655,658,667,669,670,679,680,688,698,699,700,701,703,705,708,710,714,715,721,724,726,734,738,742,743,747,765,766,773,782,783,788,789,797,803,804,805,819,822,828,829,836,837,838,840,841,844,846,847,850,852,857,869,873,887,894,920,922,925,940,942,946,949,951,954,956,968,974,975,983,988,996,1003,1005,1007,1009,1016,
                                                    6,7,76,128,161,180,228,236,275,308,430,436,696,827,
                                                    32,44,65,77,99,103,139,148,179,181,233,234,237,244,257,258,267,287,291,292,331,339,345,352,374,375,379,412,435,440,446,532,589,601,639,664,691,716,736,748,767,809,811,871,900,950,1021])
tolR_result_omit = tolR_result_omit.reset_index(drop=True)
tolR_result_omit.to_pickle('tolR_result_omit.pkl') 
         
##
pkl_file = 'C:/Jade/thesis/data/Yu-Jie 11 strains 2/yfaQ_merged_resulting_df.pkl'
with open(pkl_file, "rb") as file:
  yfaQ_merged_resulting_df = pickle.load(file)
  
yfaQ_result_omit  = yfaQ_merged_resulting_df.drop([0,6,19,23,57,213,285,297,332,348,377,429,437,470,475,478,494,499,518,553,582,614,616,677,691,697,702,703,704,736,745,750,772,781,804,842,878,892,893,895,901,906,933,972,994,1002,1028,1126,1139,1199,1209,1215,1224,1238,1243,1302,1437,1349,1450,1451,1469,1477,1595,1612,1620,1670,1693,1721,1840,1847,1855,1859,1860,1861,
                                                    4,9,21,26,29,30,36,45,49,51,53,58,60,67,68,69,71,89,93,104,107,109,117,118,120,127,134,135,138,139,140,148,150,153,159,160,164,170,175,182,184,189,190,198,204,207,208,209,213,221,225,232,234,235,237,238,253,262,265,268,272,281,284,288,293,302,308,309,310,317,319,322,323,333,342,343,346,347,355,357,358,361,362,378,385,386,400,401,402,403,406,428,433,436,442,445,447,449,453,462,472,481,482,484,486,487,495,497,500,503,513,514,517,522,524,525,527,535,536,539,540,541,551,554,555,556,561,563,566,569,575,579,583,584,586,592,600,603,612,617,620,622,625,632,635,636,637,640,650,651,652,655,657,661,663,666,667,668,670,671,673,676,681,687,690,692,705,714,716,722,723,730,737,739,770,774,785,791,794,806,808,812,823,830,837,839,843,845,847,848,861,863,866,867,874,880,881,887,888,905,907,909,910,911,912,914,915,928,934,946,951,960,966,983,990,991,995,1003,1004,1005,1007,1011,1017,1018,1023,1026,1027,1032,1033,1035,1038,1039,1041,1047,1052,1060,1063,1065,1072,1073,1074,1077,1095,1102,1106,1109,1110,1114,1117,1119,1127,1131,1135,1137,1138,1148,1149,1158,1159,1161,1162,1168,1170,1175,1177,1182,1185,1187,1190,1200,1201,1202,1204,1206,1212,1214,1221,1223,1225,1228,1233,1236,1237,1239,1240,1242,1244,1248,1249,1250,1253,1257,1259,1260,1263,1266,1269,1270,1273,1274,1279,1281,1283,1288,1289,1294,1299,1301,1307,1311,1313,1323,1324,1327,1328,1334,1335,1337,1348,1350,1351,1353,1356,1358,1359,1367,1369,1371,1371,1372,1375,1378,1385,1390,1393,1399,1402,1410,1412,1413,1423,1425,1428,1429,1431,1432,1433,1434,1440,1441,1442,1444,1446,1447,1452,1456,1459,1462,1470,1472,1479,1480,1481,1482,1484,1485,1487,1490,1491,1492,1495,1496,1498,1506,1510,1511,1512,1513,1517,1520,1522,1526,1528,1532,1535,1541,1542,1543,1547,1548,1554,1559,1560,1569,1580,1585,1588,1604,1605,1610,1613,1618,1619,1623,1624,1626,1628,1631,1640,1643,1648,1652,1660,1662,1665,1667,1669,1673,1676,1678,1679,1680,1681,1684,1685,1686,1687,1692,1698,1700,1701,1702,1704,1707,1708,1709,1710,1718,1720,1725,1726,1730,1738,1740,1741,1745,1749,1750,1756,1762,1764,1765,1766,1767,1772,1774,1781,1783,1786,1788,1793,1794,1798,1799,1804,1805,1815,1820,1825,1827,1828,1829,1830,1831,1835,1843,1848,1850,1854,1856,1857,1862,1865,1869,1870,
                                                    1409,1455,
                                                    1457,
                                                    1457])
yfaQ_result_omit = yfaQ_result_omit.reset_index(drop=True)
yfaQ_result_omit.to_pickle('yfaQ_result_omit.pkl')          

##
pkl_file = 'C:/Jade/thesis/data/Yu-Jie 11 strains 2/yijD_merged_resulting_df.pkl'
with open(pkl_file, "rb") as file:
  yijD_merged_resulting_df = pickle.load(file)
yijD_result_omit  = yijD_merged_resulting_df.drop([9,13,18,66,95,119,125,158,163,169,172,186,188,199,210,222,223,225,267,308,311,325,341,357,362,387,396,398,433,457,458,461,462,463,519,530,531,534,551,562,563,565,594,620,623,666,678,745,758,763,768,802,809,824,826,834,848,854,857,880,944,959,965,972,1018,1022,1030,1044,1048,1050,1051,1054,1080,1093,1100,1116,1172,1228,1237,1242,1265,1281,1282,1294,1297,1326,1336,1345,1355,1359,1374,1385,1394,1410,1411,1412,1464,1465,1472,1473,1482,1496,1501,1542,1546,1580,1587,1593,1607,1644,1645,1659,
                                                    4,6,8,12,20,24,32,34,61,63,77,80,82,84,85,88,92,96,97,102,103,104,107,108,114,118,121,123,127,129,130,132,133,134,136,137,138,139,140,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,159,160,161,162,171,179,180,182,183,184,185,207,211,218,221,224,226,232,251,260,278,279,289,292,293,295,298,301,306,307,312,314,315,316,317,318,319,327,328,330,331,333,334,335,336,337,342,343,344,345,346,347,348,349,351,352,353,354,355,359,361,363,369,370,374,377,380,384,385,390,399,401,402,410,411,413,414,417,424,427,429,434,435,438,440,443,445,446,453,456,460,472,480,481,484,492,493,497,501,502,511,512,514,516,520,521,523,524,525,526,528,529,536,537,539,540,541,542,543,544,547,548,549,552,553,554,555,556,557,558,560,561,566,567,568,569,570,571,572,573,574,576,579,580,597,598,605,609,610,612,628,630,633,637,639,645,646,651,652,660,664,668,675,682,688,695,699,702,708,715,716,717,719,721,730,731,735,742,743,748,749,750,756,765,769,770,773,776,777,778,779,782,783,785,788,789,791,792,793,794,797,798,799,800,801,803,804,805,806,807,808,810,812,813,814,815,816,817,819,820,821,823,845,852,867,871,874,890,891,896,912,915,929,934,950,952,961,962,968,969,971,973,974,977,979,981,995,997,999,1003,1005,1006,1007,1008,1009,1011,1012,1014,1015,1021,1023,1024,1027,1028,1031,1032,1033,1034,1035,1036,1037,1043,1046,1047,1049,1052,1053,1057,1058,1064,1071,1078,1079,1094,1099,1102,1104,1107,1140,1142,1144,1159,1160,1164,1165,1180,1182,1186,1197,1198,1212,1213,1218,1222,1224,1227,1229,1230,1232,1234,1235,1236,1238,1239,1240,1258,1261,1268,1277,1278,1285,1289,1293,1307,1308,1311,1313,1325,1328,1329,1335,1337,1339,1340,1343,1344,1346,1347,1348,1351,1352,1354,1357,1360,1361,1362,1363,1364,1365,1370,1371,1375,1376,1379,1380,1392,1406,1425,1443,1446,1458,1466,1471,1488,1490,1507,1508,1509,1513,1515,1516,1517,1519,1520,1537,1538,1543,1545,1548,1549,1550,1556,1561,1575,1588,1590,1604,1616,1619,1620,1622,1625,1626,1633,1652,1654,1660,1661,
                                                    392,403,759,822,1108,1221,1288,1502,1617,1647,
                                                    170,415,760,846,1029,1039])
yijD_result_omit = yijD_result_omit.reset_index(drop=True)
yijD_result_omit.to_pickle('yijD_result_omit.pkl')          




##
pkl_file = 'C:/Jade/thesis/data/Yu-Jie 11 strains 2/hdfR_merged_resulting_df.pkl' #1
with open(pkl_file, "rb") as file:
  hdfR_merged_resulting_df = pickle.load(file)
  
hdfR_result_omit  = hdfR_merged_resulting_df.drop([0,1,8,14,17,20,42,56,69,80,85,91,95,100,101,113,114,119,121,155,165,172,177,182,188,202,216,223,224,231,238,240,261,268,288,292,302,325,347,387,398,400,419,425,433,438,451,453,455,466,467,471,486,495,508,510,525,527,532,561,565,566,569,571,602,608,615,646,656,676,680,688,703,719,723,751,755,768,784,792,839,844,852,894,921,928,933,942,943,960,979,982,984,997,1007,1009,1042,1054,1063,1085,1087,1125,1134,1144,1152,1153,1162,1171,
                                                    2,4,6,7,9,10,13,15,16,18,19,23,27,28,29,32,33,36,40,41,44,48,50,53,57,62,63,66,67,73,74,76,77,79,81,82,88,90,92,93,94,107,108,110,111,112,115,116,118,120,126,133,137,140,142,143,146,148,150,156,157,158,159,163,168,169,173,176,185,186,187,192,193,195,196,197,198,199,200,201,205,209,213,217,220,222,228,233,234,235,236,244,252,253,255,260,265,266,270,273,275,280,281,282,283,284,294,295,296,297,298,299,303,307,308,309,310,311,312,313,314,315,317,319,329,333,336,339,340,341,343,344,350,354,357,358,360,364,366,371,379,382,388,394,395,397,399,401,403,407,411,412,414,416,418,420,422,424,426,427,428,429,430,431,439,446,456,464,469,472,473,477,478,479,482,487,490,493,494,496,505,506,511,517,522,523,526,528,530,535,539,543,544,545,550,556,563,580,585,588,591,595,602,617,618,620,621,624,629,631,632,637,638,640,642,648,650,660,661,668,670,674,677,678,682,684,687,693,702,704,710,717,718,720,724,725,727,730,731,732,734,736,738,739,740,741,743,745,746,750,756,758,759,767,777,790,793,796,797,798,800,803,804,808,809,814,818,824,825,827,833,837,838,841,843,845,854,859,860,862,869,874,881,890,892,895,897,901,910,916,924,925,926,932,939,946,954,958,959,967,980,981,983,986,988,993,994,995,1000,1002,1005,1010,1012,1013,1014,1015,1021,1022,1024,1028,1029,1030,1036,1037,1038,1039,1040,1041,1043,1047,1056,1057,1062,1074,1081,1082,1086,1089,1093,1094,1096,1101,1109,1127,1129,1131,1135,1139,1149,1151,1155,1158,1160,1162,1163,1164,1167,1168,1170,1172,1175,
                                                    822,855,918,1112,
                                                    306,423,513,714,868,966,992])
hdfR_result_omit = hdfR_result_omit.reset_index(drop=True)
hdfR_result_omit.to_pickle('hdfR_result_omit.pkl')          

##
pkl_file = 'C:/Jade/thesis/data/Yu-Jie 11 strains 2/nlpI_merged_resulting_df.pkl'#2
with open(pkl_file, "rb") as file:
  nlpI_merged_resulting_df = pickle.load(file)

nlpI_result_omit  = nlpI_merged_resulting_df.drop([21,30,31,32,33,38,58,76,90,152,154,159,172,173,176,196,201,206,241,284,288,356,362,378,411,417,452,468,511,540,593,600,629,657,702,736,792,853,
                                                    1,2,3,4,9,15,34,35,36,37,39,40,41,42,46,47,48,50,51,52,69,71,80,81,82,84,85,86,87,89,91,98,106,107,108,110,112,113,117,121,122,123,132,136,142,143,144,145,148,160,161,162,174,175,177,178,180,181,182,183,184,185,187,190,191,193,195,197,198,199,200,202,203,204,210,215,217,218,220,222,224,225,227,228,231,234,238,240,242,243,245,251,262,263,267,270,272,273,274,277,290,291,292,293,294,295,296,297,298,299,300,301,302,305,306,307,310,312,314,315,318,321,326,327,334,335,341,342,343,348,350,351,352,354,355,357,358,361,370,371,372,373,374,375,377,379,380,382,383,384,386,413,419,420,427,428,432,433,437,444,454,459,460,470,471,474,476,483,485,486,487,488,489,490,491,492,493,494,495,496,497,498,503,504,505,506,508,509,510,511,512,515,516,517,519,520,522,524,527,528,529,534,538,541,542,543,544,547,553,555,556,557,563,577,578,581,584,586,591,597,604,611,630,631,632,633,638,639,643,645,648,650,656,659,660,661,662,663,666,670,672,673,674,675,677,678,680,683,685,687,688,689,691,693,699,704,706,710,714,716,720,721,722,723,724,725,726,727,728,729,730,731,733,735,741,743,744,745,746,748,750,751,753,754,755,757,759,764,770,772,775,777,784,785,786,795,796,797,800,801,802,803,806,808,816,822,823,825,828,829,831,833,834,837,844,852,857,
                                                    449,855])
nlpI_result_omit = nlpI_result_omit.reset_index(drop=True)
nlpI_result_omit.to_pickle('nlpI_result_omit.pkl') 

##
pkl_file = 'C:/Jade/thesis/data/Yu-Jie 11 strains 2/wzzE_merged_resulting_df.pkl' #4
with open(pkl_file, "rb") as file:
  wzzE_merged_resulting_df = pickle.load(file)
  
wzzE_result_omit  = wzzE_merged_resulting_df.drop([1,4,9,24,67,71,75,77,188,257,275,349,374,375,438,439,463,464,505,509,525,526,542,549,559,591,596,598,612,664,705,733,747,756,797,827,833,843,846,895,907,941,955,998,1017,1034,1055,1068,1096,1109,1126,1147,1150,1157,1206,1220,1291,1336,1348,1359,1361,1388,1399,1400,1426,1428,1429,1469,1471,1472,1491,1492,1543,1562,1609,1646,1714,1717,1730,1767,1775,1783,1794,1795,1799,1824,1830,1894,1906,1930,1947,1957,1992,2014,2018,2020,2044,2048,2052,2055,2058,2062,2064,2067,2068,2069,2074,2079,2116,2134,2144,2162,2206,2231,2232,2252,2267,2273,2279,2286,2293,2304,2311,2314,2319,2341,2342,2376,2383,2412,2427,2435,2438,2480,2521,2539,2548,2567,2572,2575,2576,2584,2587,2590,2599,2604,2616,2621,2640,2648,2649,2666,2692,2720,2741,2757,2758,2781,2798,2854,2857,
                                                    2,3,16,17,19,20,23,24,25,27,28,29,36,42,45,46,48,50,56,63,74,81,87,88,91,96,105,106,109,110,114,115,121,125,137,142,148,150,154,164,166,171,179,180,181,182,185,187,192,194,195,201,206,209,212,213,215,216,217,229,233,235,236,237,239,241,242,243,2444,245,247,248,249,250,251,253,254,255,256,261,262,264,265,270,271,272,274,276,279,282,283,285,288,290,293,294,295,298,299,302,306,307,311,318,321,324,326,327,334,336,337,338,343,346,348,354,358,362,363,378,379,385,388,393,397,398,399,403,406,408,412,414,416,425,427,432,440,443,444,445,451,455,458,459,461,471,475,476,484,489,490,493,497,500,501,503,511,512,514,517,521,527,532,536,537,546,548,551,552,554,555,557,563,565,566,567,568,569,570,572,573,575,577,579,581,583,584,586,587,588,589,590,593,594,600,601,604,606,611,614,615,617,618,619,620,625,629,630,632,634,635,637,644,647,650,652,653,655,656,663,665,669,673,677,678,680,681,682,685,689,691,694,696,697,698,699,702,703,709,710,715,720,724,725,726,727,738,747,748,752,755,758,764,768,773,775,777,783,784,785,786,789,793,794,802,806,807,808,812,813,818,823,834,835,838,842,849,853,854,861,862,869,870,881,886,899,900,903,904,906,908,909,911,913,914,915,917,918,921,922,926,927,928,929,930,936,944,945,946,948,952,957,958,966,968,971,972,991,1000,1007,1008,1009,1010,1015,1023,1026,1027,1028,1031,1041,1052,1061,1062,1066,1071,1081,1090,1093,1106,1110,1112,1113,1123,1128,1138,1133,1151,1158,1162,1164,1165,1186,1189,1190,1191,1193,1196,1197,1201,1203,1204,1209,1212,1214,1215,1217,1221,1223,1228,1233,1234,1243,1251,1252,1271,1278,1279,1283,1285,1295,1296,1297,1316,1317,1321,1323,1329,1334,1364,1369,1375,1384,1389,1396,1405,1411,1414,1415,1427,1430,1434,1435,1445,1451,1464,1467,1469,1470,1474,1475,1476,1477,1478,1481,1484,1493,1495,1496,1500,1502,1503,1506,1515,1516,1523,1525,1526,1529,1531,1533,1534,1542,1545,1555,1557,1561,1579,1584,1585,1588,1593,1594,1601,1606,1610,1612,1624,1636,1643,1649,1669,1673,1674,1675,1686,1698,1709,1711,1724,1733,1742,1749,1753,1757,1759,1760,1762,1763,1764,1765,1768,1772,1773,1777,1778,1778,1781,1782,1784,1786,1787,1788,1789,1790,1796,1797,1798,1803,1804,1805,1806,1807,1808,1809,1810,1811,1819,1820,1821,1827,1829,1834,1836,1837,1839,1840,1844,1849,1850,1863,1882,1883,1889,1890,1893,1898,1899,1908,1915,1918,1921,1922,1923,1925,1929,1932,1943,1946,1956,1973,1986,1994,2004,2006,2009,2013,2030,2032,2033,2037,2045,2053,2056,2059,2060,2061,2063,2071,2075,2078,2081,2082,2084,2085,2088,2089,2090,2096,2099,2100,2102,2103,2104,2107,2112,2115,2118,2120,2126,2129,2130,2135,2136,2139,2140,2143,2145,2151,2156,2159,2196,2197,2209,2218,2220,2221,2226,2243,2247,2251,2256,2276,2284,2287,2297,2305,2307,2328,2329,2330,2331,2333,2336,2338,2339,2345,2353,2356,2358,2363,2364,2370,2373,2377,2387,2392,2394,2396,2397,2404,2405,2411,2416,2417,2425,2430,2430,2431,2434,2459,2461,2463,2465,2466,2475,2477,2478,2487,2498,2501,2503,2506,2507,2508,2513,2516,2529,2534,2547,2549,2561,2568,2573,2589,2591,2592,2596,2600,2602,2607,2609,2614,2617,2618,2624,2625,2626,2629,2630,2633,2635,2636,2637,2638,2639,2642,2643,2644,2645,2646,2650,2655,2659,2661,2662,2663,2665,2670,2676,2689,2694,2701,2708,2713,2714,2716,2718,2726,2733,2735,2736,2740,2743,2746,2752,2762,2768,2771,2784,2785,2787,2792,2800,2807,2816,2830,2832,2837,2841,2847,2848,2850,2859,2862,2863,2864,
                                                    297,1842,2124,
                                                    978,1315,1362,2559])
wzzE_result_omit = wzzE_result_omit.reset_index(drop=True)
wzzE_result_omit.to_pickle('wzzE_result_omit.pkl')          

##
pkl_file = 'C:/Jade/thesis/data/Yu-Jie 11 strains 2/yaaY_merged_resulting_df.pkl' #3
with open(pkl_file, "rb") as file:
  yaaY_merged_resulting_df = pickle.load(file)
  
yaaY_result_omit  = yaaY_merged_resulting_df.drop([0,2,5,10,27,99,163,186,190,199,241,254,349,493,515,517,524,573,619,641,689,757,790,791,793,794,912,918,926,966,984,987,1047,1108,1194,1200,1256,1275,1313,1345,1361,1381,1400,1440,1451,1476,1479,1483,1484,1534,1540,1570,1596,1603,1621,1645,1753,1789,1860,1919,1922,1945,1979,1998,2010,2013,2071,2082,2167,2181,2184,2223,2231,2239,2258,2272,2274,2283,2317,2374,2437,2449,2460,2520,2521,2543,2607,
                                                    7,8,17,18,19,20,21,25,27,30,31,33,35,37,38,40,41,44,45,46,48,49,50,54,56,57,61,62,70,71,74,75,76,77,78,80,82,83,86,87,89,90,96,98,100,101,103,105,108,110,112,113,116,119,121,123,124,128,129,131,132,133,134,135,138,142,143,144,147,152,158,159,160,162,164,166,168,170,171,174,185,189,192,196,197,198,199,205,209,210,211,213,215,216,218,224,227,229,232,238,241,242,244,246,249,250,259,263,264,265,266,267,268,271,275,276,277,279,280,281,283,284,285,286,288,291,293,296,303,304,305,308,309,310,312,313,317,318,319,321,322,323,329,330,333,337,338,344,347,348,352,356,363,366,368,369,370,374,384,387,389,390,394,395,396,399,404,407,411,412,417,422,423,425,429,432,436,440,442,443,445,448,450,454,459,462,474,476,477,478,481,483,484,488,493,494,495,498,501,503,507,508,509,511,518,520,521,525,529,530,531,532,533,534,540,547,550,556,558,559,563,565,571,580,581,582,584,588,593,595,604,610,616,627,628,632,637,640,652,653,654,656,662,671,672,675,677,682,686,687,693,695,699,702,703,704,713,714,718,724,730,735,736,739,740,753,754,756,762,763,768,769,770,772,773,774,775,777,780,782,784,786,788,792,797,798,799,800,801,804,811,813,815,817,819,820,821,823,824,830,832,834,835,837,843,845,849,854,858,860,861,865,866,867,869,871,878,879,880,881,884,885,886,888,889,893,896,898,899,901,903,905,907,908,911,913,917,921,931,935,938,941,944,945,947,949,950,956,959,965,975,979,980,985,986,989,991,992,997,998,1000,1001,1004,1005,1006,1008,1009,1011,1013,1013,1021,1025,1027,1029,1032,1034,1035,1037,1040,1042,1045,1051,1056,1057,1061,1064,1067,1071,1072,1074,1076,1079,1080,1087,1092,1094,1095,1097,1104,1106,1111,1112,1113,1120,1124,1126,1128,1129,1130,1136,1138,1145,1146,1150,1155,1156,1166,1168,1175,1177,1180,1181,1183,1184,1188,1192,1195,1196,1201,1203,1204,1214,1215,1216,1217,1220,1221,1222,1228,1229,1232,1234,1237,1241,1243,1244,1246,1248,1249,1250,1251,1261,1265,1266,1267,1268,1269,1272,1273,1277,1279,1281,1283,1284,1287,1291,1296,1297,1298,1300,1302,1304,1305,1308,1309,1312,1314,1316,1321,1322,1326,1327,1328,1329,1332,1333,1334,1336,1339,1341,1344,1346,1350,1353,1354,1355,1357,1358,1359,1360,1363,1366,1370,1371,1376,1377,1380,1386,1388,1389,1390,1392,1396,1398,1399,1402,1404,1408,1409,1412,1413,1419,1423,1424,1425,1427,1430,1434,1435,1436,1438,1439,1441,1444,1446,1448,1450,1452,1457,1459,1462,1465,1467,1468,1472,1473,1477,1478,1482,1488,1490,1491,1495,1497,1500,1502,1508,1513,1515,1517,1518,1519,1523,1524,1525,1527,1533,1537,1539,1541,1542,1543,1544,1548,1549,1550,1552,1554,1555,1557,1560,1562,1573,1579,1584,1585,1588,1591,1594,1602,1604,1606,1610,1611,1614,1618,1622,1624,1625,1626,1630,1633,1634,1635,1637,1639,1651,1654,1658,1659,1661,1664,1665,1666,1670,1672,1674,1675,1680,1683,1685,1686,1695,1696,1698,1701,1704,1705,1708,1709,1711,1712,1713,1715,1717,1718,1719,1726,1727,1728,1731,1732,1734,1737,1738,1746,1748,1749,1762,1766,1774,1778,1779,1780,1787,1793,1795,1797,1799,1800,1803,1808,1809,1810,1816,1817,1820,1821,1827,1828,1829,1835,1836,1839,1840,1841,1844,1849,1853,1854,1859,1869,1872,1873,1874,1875,1879,1882,1885,1886,1887,1888,1890,1893,1894,1897,1899,1907,1909,1913,1918,1921,1937,1941,1943,1946,1948,1949,1954,1964,1968,1969,1970,1971,1972,1975,1976,1982,1985,1986,1987,1990,1993,1997,2000,2001,2005,2006,2009,2012,2014,2015,2016,2018,2019,2020,2022,2029,2036,2041,2042,2051,2060,2067,2069,2070,2073,2075,2085,2086,2091,2093,2094,2095,2101,2107,2108,2113,2121,2128,2138,2139,2145,2146,2147,2150,2157,2162,2166,2169,2174,2175,2183,2185,2188,2189,2194,2199,2202,2203,2204,2206,2207,2210,2218,2225,2227,2229,2233,2235,2240,2241,2243,2244,2245,2246,2247,2248,2249,2250,2251,2253,2254,2255,2257,2261,2262,2264,2265,2266,2267,2268,2270,2277,2280,2285,2289,2292,2295,2301,2302,2307,2309,2315,2327,2328,2329,2330,2331,2335,2337,2340,2344,2347,2353,2357,2358,2359,2362,2363,2364,2365,2367,2372,2373,2376,2380,2382,2383,2385,2388,2389,2390,2391,2394,2395,2396,2397,2398,2401,2404,2405,2406,2409,2410,2411,2415,2418,2419,2421,2428,2443,2446,2450,2456,2459,2465,2467,2472,2473,2475,2477,2488,2498,2499,2500,2511,2524,2538,2540,2544,2548,2551,2555,2558,2562,2565,2569,2581,2592,2593,2596,2601,2602,2604,2605,2606,2611,2613,
                                                    548,2242,
                                                    2252,2361])
yaaY_result_omit = yaaY_result_omit.reset_index(drop=True)
yaaY_result_omit.to_pickle('yaaY_result_omit.pkl') 

##
pkl_file = 'C:/Jade/thesis/data/Yu-Jie 11 strains 2/yifE_merged_resulting_df.pkl'
with open(pkl_file, "rb") as file:
  yifE_merged_resulting_df = pickle.load(file)
  
yifE_result_omit  = yifE_merged_resulting_df.drop([5,11,28,108,159,221,260,267,278,316,319,324,339,447,462,475,476,525,544,582,660,675,696,727,742,788,793,813,893,906,936,947,952,971,975,980,983,984,1002,1012,1038,1041,1056,1075,1077,1090,1096,1121,1122,1124,1132,1172,1192,1229,1251,1291,1292,1330,1362,1363,1375,1409,1439,1440,1450,1458,1460,1473,1481,1492,1501,1510,1532,1569,1576,1587,1600,1660,1671,1679,1684,1706,1787,1821,1824,1852,1859,1866,
                                                    6,21,27,36,37,41,58,62,64,70,71,82,107,110,124,129,131,134,135,137,141,142,147,163,164,168,169,172,174,175,178,181,185,188,200,201,202,208,210,218,219,222,234,236,286,287,317,323,325,326,330,335,350,351,355,360,361,362,363,364,365,370,372,378,409,413,414,415,416,439,447,449,463,502,507,509,513,522,524,237,239,545,546,550,551,552,554,555,558,559,561,562,568,571,573,574,579,584,585,591,592,595,607,611,615,630,634,641,647,656,661,662,671,672,673,686,695,698,705,706,711,713,716,728,744,749,750,752,754,756,762,763,764,765,767,769,774,775,778,779,780,783,787,794,795,796,799,800,801,809,811,815,822,825,826,829,834,840,841,845,846,848,859,874,881,903,915,923,924,926,930,933,938,939,949,950,954,955,956,961,964,965,966,970,976,981,992,994,997,998,1013,1015,1024,1025,1031,1033,1036,1045,1048,1059,1069,1076,1078,1079,1098,1116,1117,1118,1119,1120,1123,1126,1127,1129,1131,1133,1136,1137,1144,1147,1154,1155,1160,1161,1162,1164,1170,1177,1179,1187,1188,1193,1203,1205,1220,1221,1224,1228,1232,1233,1234,1240,1242,1258,1282,1293,1303,1319,1320,1321,1328,1329,1332,1333,1335,1339,1340,1342,1348,1352,1357,1367,1370,1371,1372,1378,1379,1386,1399,1405,1412,1414,1434,1442,1449,1463,1464,1484,1487,1488,1489,1490,1491,1496,1497,1502,1512,1513,1514,1523,1539,1540,1565,1570,1577,1593,1602,1607,1610,1617,1618,1630,1631,1632,1636,1643,1650,1657,1663,1666,1674,1675,1676,1678,1680,1685,1686,1687,1688,1691,1694,1698,1704,1705,1708,1715,1716,1724,1725,1726,1727,1730,1733,1735,1743,1747,1768,1769,1784,1786,1790,1791,1812,1817,1839,1846,1855,1860,
                                                    674,746,1125,
                                                    1231])
yifE_result_omit = yifE_result_omit.reset_index(drop=True)
yifE_result_omit.to_pickle('yifE_result_omit.pkl') 


#BW25113 = 990 -> 768 cells 
#dacA = 2035 -> 1573 
#lpp = 3275 -> 2797
#tolR = 1023 -> 640
#yfaQ = 1871 -> 1311
#yijD = 1665 -> 1085
#hdfR = 1178 -> 700
#nlpI = 862 ->  506
#wzzE = 2865 -> 1976
#yaaY = 2624 -> 1628
#yifE = 1872 -> 1433


#%% Load phase contrast, DAPI and FM4-64 image and mesh_dataframe
#load meshdata
pkl_file = 'C:/Jade/thesis/data/Yu-Jie 11 strains 2/+/M9gluCAAT_yijD/M9gluCAAT_yijD_nucleoid_curated_meshdata.pkl'
with open(pkl_file, "rb") as file:
    N_mesh_dataframe = pickle.load(file) 
    
pkl_file = 'C:/Jade/thesis/data/Yu-Jie 11 strains 2/+/M9gluCAAT_yijD/M9gluCAAT_yijD_OM_aligned_contour.pkl'
with open(pkl_file, "rb") as file:
    OM_mesh_dataframe = pickle.load(file) 
    
column_mapping = {
    'object_contours': 'C2_contours',
    'object_mesh': 'C2_mesh',
    'object_midline': 'C2_midline'
}

# Rename multiple columns
N_mesh_dataframe = N_mesh_dataframe.rename(columns=column_mapping)

column_mapping = {
    'object_contours': 'C3_contour',
    'object_mesh': 'C3_mesh',
    'object_midline': 'C3_midline',
    'aligned_contour': 'C3_aligned_contour',
    'aligned_mesh': 'C3_aligned_mesh',
    'aligned_midline': 'C3_aligned_midline'
}


OM_mesh_dataframe = OM_mesh_dataframe.rename(columns=column_mapping)

# 
# Now, merge the DataFrames based on 'frame_nr' and 'cell_id'
merged_mesh_dataframe = pd.merge(N_mesh_dataframe, OM_mesh_dataframe, on=['frame', 'cell_id'], suffixes=('_N', '_OM'))
merged_mesh_dataframe = merged_mesh_dataframe.drop(merged_mesh_dataframe.columns[[3, 7, 8, 12]], axis=1)
merged_mesh_dataframe = merged_mesh_dataframe.rename(columns={'cell_mesh_N':'cell_mesh'})



#Load in phase contrast images
path = Path('C:/Jade/thesis/data/Yu-Jie 11 strains 2/+/M9gluCAAT_yijD')
path.parent.mkdir(parents=True, exist_ok=True)
phase_files = [str(p) for p in Path(path).glob("*_C1.tif")] 
C1_imgs = []
for file in phase_files:
    img = tiff.imread(file)
    C1_imgs.append(img)
C1_imgs = np.array(C1_imgs)

#Load in DAPI images
files = [str(p) for p in Path(path).glob("*_C2.tif")] 
C2_imgs = []
for file in files:
    img = tiff.imread(file)
    C2_imgs.append(img)
C2_imgs = np.array(C2_imgs)


#Load in FM4-64 images
files = [str(p) for p in Path(path).glob("*_C3.tif")] 
C3_imgs = []
for file in files:
    img = tiff.imread(file)
    C3_imgs.append(img)
C3_imgs = np.array(C3_imgs)



#%% plot images, contour and features
import sys
sys.path.append('C:/Jade/thesis/Boufti_v.240411_test/src/Boufti')
from utilities import *


merged_mesh_dataframe2 = pd.merge(merged_mesh_dataframe, yijD_result_omit, on=['frame', 'cell_id'])


for frame_num in range(0, len(C1_imgs)):

    frame_df = merged_mesh_dataframe2[merged_mesh_dataframe2['frame'] == frame_num]
    C1_img = C1_imgs[frame_num]
    C2_img = C2_imgs[frame_num]
    C3_img = C3_imgs[frame_num]


    for index, row in tqdm(frame_df.iterrows()):
        
        features = {}        

        frame_nr = row['frame']
        cell_id = row['cell_id']
        mesh = row['cell_mesh']
       
        C2_contours = row['C2_contours']
        C2_meshes = row['C2_mesh']
        C2_midline = row['C2_midline']
        
        C3_contour = row['C3_contour']
        C3_mesh = row['C3_mesh']
        C3_midline = row['C3_midline']
        
        C3_aligned_contour = row['C3_aligned_contour']
        C3_aligned_mesh = row['C3_aligned_mesh']
        C3_aligned_midline = row['C3_aligned_midline']
         
        C2_cell_avg_obj_compactness = row['C2_cell_avg_obj_compactness']
        C2_cell_avg_obj_sphericity = row['C2_cell_avg_obj_sphericity']
        C2_cell_avg_midline_sinuosity = row['C2_cell_avg_midline_sinuosity']
        C2_cell_avg_obj_eccentricity = row['C2_cell_avg_obj_eccentricity']
        C2_cell_avg_obj_convexity = row['C2_cell_avg_obj_convexity']
        C2_cell_avg_obj_solidity = row['C2_cell_avg_obj_solidity']
        C2_cell_obj_contour_avg_bending_energy = row['C2_cell_obj_contour_avg_bending_energy']
        C2_cell_obj_midline_avg_bending_energy = row['C2_cell_obj_midline_avg_bending_energy']
        
        C3_contour_homogeneity = row['C3_contour_homogeneity']
        C3_glcm_contour_contrast = row['C3_glcm_contour_contrast']
        C3_glcm_contour_dissimilarity = row['C3_glcm_contour_dissimilarity']
        C3_glcm_contour_correlation = row['C3_glcm_contour_correlation']
        C3_glcm_contour_homogeneity = row['C3_glcm_contour_homogeneity']
        C3_glcm_contour_shannon_entropy = row['C3_glcm_contour_shannon_entropy']
        C3_glcm_contour_energy = row['C3_glcm_contour_energy']

        x1 = mesh[:,0]
        y1 = mesh[:,1]
        x2 = mesh[:,2]
        y2 = mesh[:,3]
        
            
        try:
        
            features['frame'] = frame_nr
            features['cell_id'] = cell_id
            
            # C1
            C1_contour = mesh2contour(x1, y1, x2, y2)           
            cropped_C1_img, _, cropped_C1_contour, x, y = crop_image(C1_img, C1_contour)

            # C2
            cropped_C2_masks, cropped_C2_img, cropped_C2_contours, cropped_C2_midlines, cropped_C2_meshes, x, y = get_object_masks(C1_contour, C2_contours, C2_midline, C2_meshes, C2_img)
         
            # C3
            cropped_C3_img, _, cropped_C3_contour, x, y = crop_image(C3_img, C1_contour)

      
            ##### plot cropped image #### 
            ##  Scale bar
            scale_length_um = 1
            scale_length_px = scale_length_um / 0.065  # Convert µm to pixels

            scale_x =  cropped_C3_img.shape[1] - 2
            scale_y =  cropped_C3_img.shape[0] - 2
            

            ## Plot
            fig, axs = plt.subplots(1, 3, figsize=(15, 5))

            axs[0].imshow(cropped_C1_img, cmap='gist_gray')
            axs[0].plot(cropped_C1_contour.T[1], cropped_C1_contour.T[0], '-', c='yellow', lw=2)   
            axs[0].set_title(f'Frame {frame_nr}, Cell id {cell_id}')
            axs[0].axis('off')
            

            axs[1].imshow(cropped_C2_img, cmap='gist_gray')
            axs[1].plot(C3_aligned_contour.T[1], C3_aligned_contour.T[0], '-', c='orange', lw=2)
            for cropped_C2_contour in cropped_C2_contours:
                axs[1].plot(cropped_C2_contour.T[1], cropped_C2_contour.T[0], '-', c='cyan', lw=2)
            
            # Compactness                
            # axs[1].text(0.5, 0.8, f'Nucleoid compactness: {C2_cell_avg_obj_compactness:.2f}', transform=axs[1].transAxes,
            #   color='white', fontsize=15, ha='center', va='center', bbox=dict(facecolor='black', alpha=0.7))
                          
            # Sphericity
            # axs[1].text(0.5, 0.95, f'Nucleoid sphericity : {C2_cell_avg_obj_sphericity:.2f}', transform=axs[1].transAxes,
            #   color='white', fontsize=15, ha='center', va='center', bbox=dict(facecolor='black', edgecolor='white', alpha=0.7))
              
            # sinuosity
            # axs[1].text(0.5, 0.9, f'Nucleoid sinuosity : {C2_cell_avg_midline_sinuosity:.2f}', transform=axs[1].transAxes,
            #   color='white', fontsize=15, ha='center', va='center', bbox=dict(facecolor='black', edgecolor='white', alpha=0.7))
            
            # eccentricity
            # axs[1].text(0.5, 0.95, f'Nucleoid eccentricity : {C2_cell_avg_obj_eccentricity:.2f}', transform=axs[1].transAxes,
            #   color='white', fontsize=15, ha='center', va='center', bbox=dict(facecolor='black', edgecolor='white', alpha=0.7))
            
            # convexity
            # axs[1].text(0.5, 0.9, f'Nucleoid convexity : {C2_cell_avg_obj_convexity:.2f}', transform=axs[1].transAxes,
            #   color='white', fontsize=15, ha='center', va='center', bbox=dict(facecolor='black', edgecolor='white', alpha=0.7))
            
            # solidity
            # axs[1].text(0.5, 0.9, f'Nucleoid solidity : {C2_cell_avg_obj_solidity:.2f}', transform=axs[1].transAxes,
            #   color='white', fontsize=15, ha='center', va='center', bbox=dict(facecolor='black', edgecolor='white', alpha=0.7))
            
            # Contour bending energy
            # axs[1].text(0.5, 0.95, f'Nucleoid bending energy : {C2_cell_obj_contour_avg_bending_energy:.2f}', transform=axs[1].transAxes,
            #   color='white', fontsize=15, ha='center', va='center', bbox=dict(facecolor='black', edgecolor='white', alpha=0.7))
            
            # midline bending energy
            axs[1].text(0.5, 0.95, f'Nucleoid bending energy : {C2_cell_obj_midline_avg_bending_energy:.2f}', transform=axs[1].transAxes,
              color='white', fontsize=15, ha='center', va='center', bbox=dict(facecolor='black', edgecolor='white', alpha=0.7))
     
            axs[1].set_title(f'Frame {frame_nr}, Cell id {cell_id}')
            axs[1].axis('off')
            
            

            axs[2].imshow(cropped_C3_img, cmap='gist_gray')
            axs[2].plot(C3_aligned_contour.T[1], C3_aligned_contour.T[0], '-', c='orange', lw=2)
                        
            # Gradient homogeneity 
            # axs[2].text(0.5, 0.1, f'Membrane homogeneity : {C3_contour_homogeneity:.8f}', transform=axs[2].transAxes,
            #   color='white', fontsize=15, ha='center', va='center', bbox=dict(facecolor='black', edgecolor='white', alpha=0.7))
            
            # Contrast
            # axs[2].text(0.5, 0.95, f'Membrane GLCM contrast : {C3_glcm_contour_contrast:.2f}', transform=axs[2].transAxes,
            #   color='white', fontsize=15, ha='center', va='center', bbox=dict(facecolor='black', edgecolor='white', alpha=0.7))
                        
            # Dissimilairty
            # axs[2].text(0.5, 0.95, f'Membrane GLCM dissimilarity : {C3_glcm_contour_dissimilarity:.2f}', transform=axs[2].transAxes,
            #   color='white', fontsize=15, ha='center', va='center', bbox=dict(facecolor='black', edgecolor='white', alpha=0.7))
            
            # Correlation
            # axs[2].text(0.5, 0.9, f'Membrane GLCM correlation : {C3_glcm_contour_correlation:.3f}', transform=axs[2].transAxes,
            #   color='white', fontsize=15, ha='center', va='center', bbox=dict(facecolor='black', edgecolor='white', alpha=0.7))
            
            # Homogeneity
            # axs[2].text(0.5, 0.9, f'Membrane GLCM homogeneity : {C3_glcm_contour_homogeneity:.2f}', transform=axs[2].transAxes,
            #   color='white', fontsize=15, ha='center', va='center', bbox=dict(facecolor='black', edgecolor='white', alpha=0.7))
            
            # Entropy
            # axs[2].text(0.5, 0.95, f'Membrane GLCM entropy : {C3_glcm_contour_shannon_entropy:.2f}', transform=axs[2].transAxes,
            #   color='white', fontsize=15, ha='center', va='center', bbox=dict(facecolor='black', edgecolor='white', alpha=0.7))
            
            # Energy
            axs[2].text(0.5, 0.95, f'Membrane GLCM energy : {C3_glcm_contour_energy:.2f}', transform=axs[2].transAxes,
              color='white', fontsize=15, ha='center', va='center', bbox=dict(facecolor='black', edgecolor='white', alpha=0.7))       
            
            axs[2].plot([scale_x, scale_x - scale_length_px], [scale_y, scale_y], color='white', lw=2)
            axs[2].set_title(f'Frame {frame_nr}, Cell id {cell_id}')
            axs[2].axis('off')
            
            plt.tight_layout()
            plt.show()
           
       
        except ValueError:
            print(f'Error for cell_id: {cell_id} and frame: {frame_nr}')
        







#%% Add tag and strain name   
# Define the strain name
# strain_names = ['BW25113'] #0
# strain_names = ['dacA','lpp','tolR','yfaQ','yijD'] #+ wider
strain_names = ['hdfR','nlpI','wzzE','yaaY','yifE'] #- narrower

for strain_name in strain_names:

    result_omit_none_variable_name = f"{strain_name}_result_omit_none"
    merged_result_variable_name = f"{strain_name}_result_omit"
    
  
    # Copy the nucleoid resulting DataFrame to a new variable with the strain name
    globals()[result_omit_none_variable_name] = globals()[merged_result_variable_name].copy()

    # Get the number of columns in the new DataFrame
    num_columns = len(globals()[result_omit_none_variable_name].columns)

    # Insert 'strain' and 'tag' columns
    globals()[result_omit_none_variable_name].insert(num_columns, 'tag', '-') # change the "tag" sign = 0/+/-
    globals()[result_omit_none_variable_name].insert(num_columns + 1, 'strain', strain_name)
    

    # Remove frame and cell_id
    title_variable_name = f"{strain_name}_title"
    globals()[title_variable_name] = globals()[result_omit_none_variable_name].iloc[:, :3]
    
    #Remove None values
    globals()[result_omit_none_variable_name] = globals()[result_omit_none_variable_name].iloc[:, 1:]
    globals()[result_omit_none_variable_name] = globals()[result_omit_none_variable_name].dropna(subset=['cell_perimeter'])

    # Columns to delete
    columns_to_delete = ['C2_signal_rel_constr_pos_mesh', 'cell_rel_constr_pos_axial',
                         'cell_rel_constr_pos_mesh', 'cell_rel_constr_pos_width', 'cell_rel_constr_pos_width_axial']
    globals()[result_omit_none_variable_name] = globals()[result_omit_none_variable_name].drop(columns=columns_to_delete, axis=1)
    globals()[result_omit_none_variable_name] = globals()[result_omit_none_variable_name].dropna()
    globals()[result_omit_none_variable_name] = globals()[result_omit_none_variable_name].reset_index(drop=True)
    
    
    # Save the DataFrame as a pickle file
    pickle_filename = f"{strain_name}_result_omit_none.pkl"
    globals()[result_omit_none_variable_name].to_pickle(pickle_filename)



    # Check for None values
    rows_with_none = globals()[result_omit_none_variable_name][globals()[result_omit_none_variable_name].isna().any(axis=1)].index
    columns_with_none = globals()[result_omit_none_variable_name].columns[globals()[result_omit_none_variable_name].isna().any()]

    if len(rows_with_none) > 0:
        print(f"Rows with None values for {strain_name}:")
        print(rows_with_none)
    elif len(columns_with_none) > 0:
        print(f"Columns with None values for {strain_name}:")
        print(columns_with_none)
    else:
        print(f"No None values for {strain_name}")




#BW25113_result_omit_none 742
#dacA_result_omit_none 1527
#lpp_result_omit_none 2713
#tolR_result_omit_none  613
#yfaQ_result_omit_none  1275
#yijD_result_omit_none  1049
#hdfR_result_omit_none  666
#nlpI_result_omit_none  486
#wzzE_result_omit_none  1877
#yaaY_result_omit_none  1582
#yifE_result_omit_none  1373



#%% Demograph

#Demograph
def plot_demograph(cell_lengths, normalized_average_mesh_intensity, cmap='rainbow',x_label = 'Distance From Midcell (µm)',y_label = 'Cell Length Percentile', cbar_title = 'Rel. DAPI intensity'):
    # Sort DataFrame by 'cell_lengths' in descending order
    sorted_indices = np.argsort(cell_lengths)[::-1]
    sorted_lengths = cell_lengths[sorted_indices]
    sorted_intensities = normalized_average_mesh_intensity[sorted_indices]

    # Find the maximum length of the arrays
    max_length = max(len(arr) for arr in sorted_intensities)

    padded_arrays = []
    for array in sorted_intensities:
        # Calculate the padding needed to make the array length equal to max_length
        padding_needed = max_length - len(array)

        # Calculate the left and right padding based on the padding_needed
        left_padding = padding_needed // 2
        right_padding = padding_needed - left_padding

        # Pad the array equally to the left and right with NaNs
        padded_array = np.pad(array, (left_padding, right_padding), mode='constant', constant_values=np.nan)
        padded_arrays.append(padded_array)
    stacked_demograph = np.vstack(padded_arrays)

    fig1 = plt.figure(figsize=(10, 10))  # Adjust figure size as needed

    ax = plt.subplot(111)
    image = ax.imshow(stacked_demograph, aspect='auto', cmap=cmap)  # Adjust vmin and vmax as needed
    cbar = plt.colorbar(image)  # Use the image as the mappable object for the colorbar
    cbar.set_label(cbar_title, rotation=270, labelpad=20, fontsize=14)  # Set colorbar label
    cbar.ax.tick_params(labelsize=14)  # Adjust colorbar tick label size

    # Calculate x-axis values and middle index
    x_axis_values = np.arange(stacked_demograph.shape[1])
    middle_index = len(x_axis_values) // 2
    percentile_values = np.linspace(0, 100, len(sorted_lengths))
    # Set x-axis ticks and labels
    half_cell_length = sorted_lengths.max() // 2
    pos = [0, middle_index, len(x_axis_values)]
    label = [-half_cell_length, 0, half_cell_length]  # Adjust labels relative to the middle index
    plt.xticks(pos, label)
    plt.yticks([0, len(sorted_lengths) * 0.25, len(sorted_lengths) * 0.5, len(sorted_lengths) * 0.75, len(sorted_lengths) - 1],
               ['0', '25', '50', '75', '100'])
    plt.ylabel(y_label, fontsize=16)
    plt.xlabel(x_label, fontsize=16)

    plt.show()


#Demograph rotated
from scipy.interpolate import interp1d

def plot_demograph_rotated(cell_lengths, normalized_average_mesh_intensity, title='Demograph Plot', cmap='rainbow',x_label = 'Distance From Midcell (µm)',y_label = 'Cell Length Percentile', cbar_title='Rel. FM4-64 normalized intensity'):
    # Sort DataFrame by 'cell_lengths' in descending order
    sorted_indices = np.argsort(cell_lengths)[1::]
    sorted_lengths = cell_lengths[sorted_indices]
    sorted_intensities = normalized_average_mesh_intensity[sorted_indices]
    # Find the maximum length of the arrays
    max_length = max(len(arr) for arr in sorted_intensities)
    # Interpolate missing values for shorter arrays
    interpolated_arrays = []
    for array in sorted_intensities:
        x = np.arange(len(array))  # x-coordinates for the existing intensity values
        f = interp1d(x, array, kind='linear', fill_value='extrapolate')  # Interpolation function
        interpolated_array = f(np.linspace(0, len(array), max_length))  # Interpolated array
        interpolated_arrays.append(interpolated_array)
    stacked_demograph = np.vstack(interpolated_arrays)
    fig1 = plt.figure(figsize=(10, 8))  # Adjust figure size as needed
    ax = plt.subplot(111)
    image = ax.imshow(stacked_demograph.T, aspect='auto', cmap=cmap)  # Transpose the array
    cbar = plt.colorbar(image)  # Use the image as the mappable object for the colorbar
    cbar.set_label(cbar_title, rotation=90, labelpad=20, fontsize=14)  # Set colorbar label
    cbar.ax.tick_params(labelsize=14)  # Adjust colorbar tick label size
    # Calculate y-axis values and middle index
    y_axis_values = np.arange(stacked_demograph.shape[1])
    middle_index = len(y_axis_values) // 2
    percentile_values = np.linspace(0, 100, len(sorted_lengths))
    # Set y-axis ticks and labels
    half_cell_length = sorted_lengths.max() // 2
    pos = [0, middle_index, len(y_axis_values)]
    label = [-half_cell_length, 0, half_cell_length]  # Adjust labels relative to the middle index
    plt.yticks(pos, label)
    plt.xticks([0, len(sorted_lengths) * 0.25, len(sorted_lengths) * 0.5, len(sorted_lengths) * 0.75, len(sorted_lengths)],
               ['0', '25', '50', '75', '100'])
    plt.xlabel(x_label, fontsize=16)
    plt.ylabel(y_label, fontsize=16)
    plt.title(title, fontsize=18)  # Set the plot title
    plt.show()





plot_demograph(yifE_result_omit_none['C2_cell_length'], yifE_result_omit_none['C2_normalized_average_mesh_intensity'], cmap = 'rainbow')
plot_demograph(yifE_result_omit_none["C2_cell_length"], yifE_result_omit_none["C3_complemented_normalized_contour_intensity"],x_label = 'Pole 1 to Pole 2 distance along the contour',y_label = 'Cell length Percentile',cbar_title = 'Rel. FM4-64 intensity')
plot_demograph_rotated(yifE_result_omit_none["C2_cell_length"], yifE_result_omit_none["C3_complemented_normalized_contour_intensity"],y_label = 'Pole 1 to Pole 2 distance along the contour',x_label = 'Cell length Percentile',cbar_title = 'Rel. FM4-64 intensity')






#%% Keep numeric single digit features
strain_names = ['BW25113','dacA','lpp','tolR','yfaQ','yijD','hdfR','nlpI','wzzE','yaaY','yifE'] 


for strain_name in strain_names:
    result_omit_none_numeric_variable_name = f"{strain_name}_result_omit_none_numeric"
    result_omit_none_variable_name = f"{strain_name}_result_omit_none"

    # Copy the nucleoid resulting DataFrame to a new variable with the strain name
    globals()[result_omit_none_numeric_variable_name] = globals()[result_omit_none_variable_name].copy()
    
    columns_to_delete = ['C2_normalized_average_mesh_intensity', 'C3_normalized_contour_intensity',
                         'cell_id','frame','C2_cell_length','C2_cell_total_obj_volume_approx',
                         'cell_constriction_degree_axial','cell_constriction_degree_width',
                         'cell_constriction_degree_width_axial','cell_max_midline_curvature',
                         'cell_mean_midline_curvature','cell_midline_bending_energy',
                         'cell_min_midline_curvature','cell_std_midline_curvature',
                         'tag'
                         
                         ]
    globals()[result_omit_none_numeric_variable_name] = globals()[result_omit_none_numeric_variable_name].drop(columns=columns_to_delete, axis=1)
    
    # Save the DataFrame as a pickle file
    pickle_filename = f"{strain_name}_result_omit_none_numeric.pkl"
    globals()[result_omit_none_numeric_variable_name].to_pickle(pickle_filename)



#%% Merge dataframes
list_of_dataframe_names = ['BW25113_result_omit_none_numeric','dacA_result_omit_none_numeric','lpp_result_omit_none_numeric','tolR_result_omit_none_numeric','yfaQ_result_omit_none_numeric','yijD_result_omit_none_numeric',\
                      'hdfR_result_omit_none_numeric','nlpI_result_omit_none_numeric','wzzE_result_omit_none_numeric','yaaY_result_omit_none_numeric','yifE_result_omit_none_numeric']

# Create a list of DataFrame objects using the names
list_of_dataframes = [globals()[name] for name in list_of_dataframe_names]
result_dataframes = pd.concat(list_of_dataframes, ignore_index=True)
result_dataframes = result_dataframes.reset_index(drop=True)
result_dataframes.to_pickle('AllData.pkl') 


  
saving_path = 'C:/Jade/thesis/data/Yu-Jie 11 strains 2/'
result_dataframes.to_csv(saving_path + 'AllData.csv')

# Get counts
# result_dataframes.groupby('strain').size()



# load data
pkl_file = 'C:/Jade/thesis/data/Yu-Jie 11 strains 2/AllData.pkl'
with open(pkl_file, "rb") as file:
  result_dataframes = pickle.load(file)
  
  
